{"version":3,"sources":["logo.svg","CityCard.js","CityDisplay.js","App.js","reportWebVitals.js","index.js"],"names":["CityCard","props","className","name","state","locationLat","locationLong","population","wages","CityDisplay","data","zip","resultsFound","changeZip","bind","event","this","setState","target","value","fetchData","url","axios","get","then","response","catch","err","console","log","type","onChange","placeholder","map","item","index","LocationText","State","Lat","Long","EstimatedPopulation","TotalWages","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNAAe,I,uDCeAA,EAbE,SAACC,GAAD,OACf,sBAAKC,UAAU,WAAf,UACE,qBAAKA,UAAU,QAAf,SACE,6BAAKD,EAAME,SAEb,0CAAaF,EAAMG,SACnB,8CACcH,EAAMI,YADpB,KACmCJ,EAAMK,aADzC,OAGA,0DAA6BL,EAAMM,cACnC,gDAAmBN,EAAMO,aCsEdC,E,kDA7Eb,WAAYR,GAAQ,IAAD,8BACjB,cAAMA,IACDG,MAAQ,CACXM,KAAM,GACNC,IAAK,GACLC,cAAc,GAGhB,EAAKC,UAAY,EAAKA,UAAUC,KAAf,gBARA,E,sDAYTC,GACRC,KAAKC,SAAS,CACZL,cAAc,EACdD,IAAKI,EAAMG,OAAOC,U,2CAMpBH,KAAKI,c,kCAGM,IAAD,OACNC,EAAM,wCAA0CL,KAAKZ,MAAMO,IAC/DW,IACGC,IAAIF,GACJG,MAAK,SAACC,GACL,EAAKR,SAAS,CAAEP,KAAMe,EAASf,KAAME,cAAc,OAEpDc,OAAM,SAACC,GACNC,QAAQC,IAAIF,Q,+BAMhB,OADAC,QAAQC,IAAIb,KAAKZ,MAAMM,MAErB,gCACE,qBAAKR,UAAU,SAAf,SACE,qBAAKA,UAAU,YAAf,SACE,uBACE4B,KAAK,OACLX,MAAOH,KAAKZ,MAAMO,IAClBoB,SAAUf,KAAKH,UACfmB,YAAY,0BAOjBhB,KAAKZ,MAAMQ,aACV,8BACGI,KAAKZ,MAAMM,KAAKuB,KAAI,SAACC,EAAMC,GAAP,OACnB,cAAC,EAAD,CAEEhC,KAAM+B,EAAKE,aACXhC,MAAO8B,EAAKG,MACZhC,YAAa6B,EAAKI,IAClBhC,aAAc4B,EAAKK,KACnBhC,WAAY2B,EAAKM,oBACjBhC,MAAO0B,EAAKO,YANPN,QAWX,qBAAKjC,UAAU,WAAf,SACE,oD,GAtEcwC,a,MCaXC,MAZf,WACE,OACE,sBAAKzC,UAAU,MAAf,UACE,qBAAKA,UAAU,SAAf,SACE,8CAGF,cAAC,EAAD,QCAS0C,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.91ffaae3.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from \"react\";\n\nconst CityCard = (props) => (\n  <div className=\"cityCard\">\n    <div className=\"title\">\n      <h3>{props.name}</h3>\n    </div>\n    <div>State: {props.state}</div>\n    <div>\n      Location: ({props.locationLat}, {props.locationLong})\n    </div>\n    <div> Estimated Population: {props.population}</div>\n    <div>Total Wages: {props.wages}</div>\n  </div>\n);\nexport default CityCard;\n","import React, { Component } from \"react\";\nimport axios from \"axios\";\nimport CityCard from \"./CityCard\";\n\nclass CityDisplay extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      data: [],\n      zip: \"\",\n      resultsFound: false,\n    };\n\n    this.changeZip = this.changeZip.bind(this);\n  }\n\n  //on typing, change zip state\n  changeZip(event) {\n    this.setState({\n      resultsFound: false,\n      zip: event.target.value,\n    });\n  }\n\n  //fetch data when component's state updates\n  componentDidUpdate() {\n    this.fetchData();\n  }\n\n  fetchData() {\n    let url = \"http://ctp-zip-api.herokuapp.com/zip/\" + this.state.zip;\n    axios\n      .get(url)\n      .then((response) => {\n        this.setState({ data: response.data, resultsFound: true });\n      })\n      .catch((err) => {\n        console.log(err);\n      });\n  }\n\n  render() {\n    console.log(this.state.data);\n    return (\n      <div>\n        <div className=\"search\">\n          <div className=\"searchBox\">\n            <input\n              type=\"text\"\n              value={this.state.zip}\n              onChange={this.changeZip}\n              placeholder=\"Enter zip-code...\"\n            ></input>\n            {/* <button onClick={this.startSearch}>Search</button> */}\n          </div>\n        </div>\n\n        {/* show results if data was found for the give zip-code */}\n        {this.state.resultsFound ? (\n          <div>\n            {this.state.data.map((item, index) => (\n              <CityCard\n                key={index}\n                name={item.LocationText}\n                state={item.State}\n                locationLat={item.Lat}\n                locationLong={item.Long}\n                population={item.EstimatedPopulation}\n                wages={item.TotalWages}\n              />\n            ))}\n          </div>\n        ) : (\n          <div className=\"cityCard\">\n            <p>No results</p>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nexport default CityDisplay;\n","import logo from \"./logo.svg\";\n//import \"./App.css\";\nimport CityDisplay from \"./CityDisplay\";\nimport \"./zip-search.css\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h1>Zip Search</h1>\n      </div>\n\n      <CityDisplay />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}